services:
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - DS_PROMETHEUS=Prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring

  postgres_db:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cashflow
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - monitoring

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yml
      - ./logs:/var/log
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - monitoring

  cashflow:
    build:
      context: ..
      dockerfile: Dockerfile
    image: cashflow:0.0.1-SNAPSHOT
    container_name: cashflow
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_db:5432/cashflow
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SERVER_PORT=8080
      - SPRING_PROFILES_ACTIVE=prod
      - SPRING_APPLICATION_NAME=cashflow
      - SPRING_BOOT_ADMIN_CLIENT_URL=http://spring-boot-admin:8085
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres_db
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  monitoring:
    # Using bridge driver for the monitoring network
    # This network is also used by the spring-boot-admin container
    # which is defined in a separate docker-compose file
    name: monitoring
    driver: bridge
    # Using the 'external: true' option to connect to an existing network
    # This allows containers from different docker-compose files to communicate
    external: false

volumes:
  grafana-data:
  loki-data:
  postgres-data: